//
//  AddPatientWorker.swift
//  NurseHelper
//
//  Created by Vyacheslav Okulov on 2/2/17.
//  Copyright (c) 2017 Vyacheslav Okulov. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation
import CoreData

typealias AddPatientWorkerCompletion = (_ result:Bool, _ message:String) -> Void

class AddPatientWorker {
  
  var fullNameValidator:StringValidator!
  var emailValidator:StringValidator!
  var phoneValidator:StringValidator!
  
  // MARK: - Business Logic

  func addPatient(request:AddPatient.Request, completion:@escaping AddPatientWorkerCompletion) {
    //validate
    let emailValidationResult = emailValidator.validate(string: request.email)
    let fullNameValidationResult = fullNameValidator.validate(string: request.fullName)
    let phoneValidationResult = phoneValidator.validate(string: request.phone)
    
    if !checkEmailValidationResult(result: emailValidationResult, completion: completion) {
      return
    }
    
    if !checkFullNameValidationResult(result: fullNameValidationResult, completion: completion) {
      return
    }
    
    if !checkPhoneValidationResult(result: phoneValidationResult, completion: completion) {
      return
    }
    
    addPatientToDB(request: request, completion: completion)
    
  }
}

private extension AddPatientWorker {
  func addPatientToDB(request:AddPatient.Request, completion:@escaping AddPatientWorkerCompletion) {
    CoreDataManager.shared.performForegroundTask { (context) in
      //TODO:- check for existing patients
      let managedPatient = ManagedPatient(context: context)
      managedPatient.email = request.email
      managedPatient.fullName = request.fullName
      managedPatient.phone = request.phone
      
      do {
        try context.save()
        completion(true, "")
      }
      catch {
        completion(false,"Error when saving to db")
      }
    }
  }
  
  func checkEmailValidationResult(result:StringValidationResponse, completion:AddPatientWorkerCompletion) -> Bool {
    switch result {
    case .wrongString(_):
      completion(false, "Email has wrong format")
      return false
    default:
      break
    }
  
    return true
  }
  
  func checkFullNameValidationResult(result:StringValidationResponse, completion:AddPatientWorkerCompletion) -> Bool {
    switch result {
    case .wrongString(_):
      completion(false, "Full name has wrong format")
      return false
    default:
      break
    }
    
    return true
  }
  
  
  func checkPhoneValidationResult(result:StringValidationResponse, completion:AddPatientWorkerCompletion) -> Bool {
    switch result {
    case .wrongString(_):
      completion(false, "Password has wrong format")
      return false
      
    default:
      break
    }
    
    return true
  }
  
}
